openapi: 3.0.0
info:
  title: Event Manager API
  version: 1.0.0
servers:
  - url: http://localhost:5000
tags:
  - name: Authentication
    description: Operaciones de registro y login
  - name: Users
    description: Gestión de usuarios
  - name: Events
    description: Operaciones con eventos

paths:
  /register:
    post:
      summary: Registrar nuevo usuario
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Usuario registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      summary: Iniciar sesión
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Obtener todos los usuarios
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Obtener usuario por ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detalles del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Usuario no encontrado
    
    put:
      summary: Actualizar usuario
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    
    delete:
      summary: Eliminar usuario
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Usuario eliminado

  /events:
    post:
      summary: Crear nuevo evento
      tags: [Events]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Evento creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
    
    get:
      summary: Obtener todos los eventos
      tags: [Events]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de eventos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponse'

  /events/{id}:
    get:
      summary: Obtener evento por ID
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detalles del evento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
    
    put:
      summary: Actualizar evento
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdate'
      responses:
        '200':
          description: Evento actualizado
    
    delete:
      summary: Eliminar evento
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Evento eliminado

components:
  schemas:
    UserRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          pattern: "^[A-Za-zÁÉÍÓÚáéíóúÑñ\\s]+$"
          example: José Pérez
        email:
          type: string
          format: email
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: SecurePassword123!

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          example: user@example.com
        password:
          type: string
          format: password
          example: SecurePassword123!

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    UserResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
      example:
        id: 1
        name: José Pérez
        email: user@example.com

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          pattern: "^[A-Za-zÁÉÍÓÚáéíóúÑñ\\s]+$"
        email:
          type: string
          format: email
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        password:
          type: string
          format: password

    Event:
      type: object
      required:
        - title
        - date
        - userId
      properties:
        title:
          type: string
          example: Conferencia Tech
        description:
          type: string
          example: Evento anual de tecnología
        location:
          type: string
          example: Centro de Convenciones
        date:
          type: string
          format: date-time
          example: 2024-12-31T20:00:00Z
        userId:
          type: integer
          example: 1

    EventResponse:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          properties:
            id:
              type: integer

    EventUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        date:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
          example: Error message
        details:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                example: /body/email
              message:
                type: string
                example: should be email

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
